QueryType = ::GraphQL::ObjectType.define do
  name "Query"
  description "The query root of this schema"

  [
    <%= collections.map { |c| ":#{c}" }.join(", ") %>
  ].each do |collection|

    klass_names   = collection.to_s.camelize
    klass_name    = klass_names.singularize
    model_class   = klass_name.constantize
    resource_type = "::Insights::API::Common::GraphQL::Api::#{version_namespace}::#{klass_name}Type".constantize

    collection_schema_overlay = ::Insights::API::Common::GraphQL::Generator.collection_schema_overlay(schema_overlay, collection)
    base_query                = collection_schema_overlay["base_query"]

    field collection do
      description "List available #{collection}"
      type types[resource_type]

      argument :id,      types.ID
      argument :offset,  types.Int, "The number of #{collection} to skip before starting to collect the result set"
      argument :limit,   types.Int, "The number of #{collection} to return"
      argument :filter,  ::Insights::API::Common::GraphQL::Types::QueryFilter, "The Query Filter for querying the #{collection}"
      argument :sort_by, ::Insights::API::Common::GraphQL::Types::QuerySortBy, "The optional attributes to sort by. Provided as an array of attr[:asc] and attr:desc values"

      resolve lambda { |_obj, args, ctx|
        if base_query.present?
          scope = base_query.call(model_class, ctx)
        else
          scope = model_class
        end

        if args[:filter]
          openapi_doc = ::Insights::API::Common::OpenApi::Docs.instance["<%= api_version %>"]
          openapi_schema_name, _schema = ::Insights::API::Common::GraphQL::Generator.openapi_schema(openapi_doc, klass_name)
          scope = ::Insights::API::Common::Filter.new(
            scope,
            ActionController::Parameters.new(args[:filter]),
            openapi_doc.definitions).apply
        end
        scope = ::Insights::API::Common::GraphQL.search_options(scope, args)
        if <%= graphql_options[:use_pagination_v2] %> == true
          ::Insights::API::Common::PaginatedResponseV2.new(
            base_query: scope, request: nil, limit: args[:limit], offset: args[:offset], sort_by: args[:sort_by]
          ).records
        else
          ::Insights::API::Common::PaginatedResponse.new(
            base_query: scope, request: nil, limit: args[:limit], offset: args[:offset], sort_by: args[:sort_by]
          ).records
        end
      }
    end
  end
end
