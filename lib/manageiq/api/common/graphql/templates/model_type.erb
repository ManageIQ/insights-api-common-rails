<%= klass_name %>Type = ::GraphQL::ObjectType.define do
  name "<%= klass_name %>"
  description "A <%= klass_name %>"

<% model_properties.each do |property| %>
<%   property_name, property_type, property_description = property %>
<%   field_description = property_description.nil? ? "" : ", \"#{property_description}\"" %>
<%   field_resolver = "" %>
<%   if field_resolvers[property_name].present? %>
<%     field_resolver = "do\n    resolve ->(obj, args, ctx) #{field_resolvers[property_name].strip}\n  end"%>
<%   end%>
  field :<%= property_name %>, <%=property_type%> <%=field_description%> <%=field_resolver%>
<% end %>
<% if model_associations.present? %>
<%   model_associations.each do |association| %>
<%     associations = association.pluralize %>
<%     association_class_name  = association.camelize.singularize %>

  field :<%= associations %> do
    description "The <%= associations %> associated with this <%= klass_name %>"
    type types[<%= "#{association_class_name}Type" %>]

    argument :id, types.ID
    argument :offset, types.Int, "The number of <%= associations %> to skip before starting to collect the result set"
    argument :limit,  types.Int, "The number of <%= associations %> to return"
    argument :filter, ::ManageIQ::API::Common::GraphQL::Types::QueryFilter, "The Query Filter for querying the associated <%= associations %>"

    resolve lambda { |obj, args, _ctx|
      scope = if args[:filter]
                ::ManageIQ::API::Common::Filter.new(obj.<%= associations %>,
                                                    ActionController::Parameters.new(args[:filter]),
                                                    ::Api::Docs["<%= api_version %>"].definitions["<%= association_class_name %>"]).apply

              else
                obj.<%= associations %>
              end
      ::ManageIQ::API::Common::GraphQL.paginated_search(scope, args)
    }
  end
<%   end %>
<% end %>
end
