{
  "openapi": "3.0.0",
  "info": {
    "description": "Sources",
    "version": "1.0.0",
    "title": "Sources",
    "contact": {
      "email": "support@redhat.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "security": [
    {
      "UserSecurity": [

      ]
    }
  ],
  "paths": {
    "/authentications": {
      "get": {
        "summary": "List Authentications",
        "operationId": "listAuthentications",
        "description": "Returns an array of Authentication objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Authentication",
        "operationId": "createAuthentication",
        "description": "Creates a Authentication object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Authentication"
              }
            }
          },
          "description": "Authentication attributes to create",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Authentication creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authentication"
                }
              }
            }
          }
        }
      }
    },
    "/authentications/{id}": {
      "get": {
        "summary": "Show an existing Authentication",
        "operationId": "showAuthentication",
        "description": "Returns a Authentication object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authentication"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/endpoints": {
      "get": {
        "summary": "List Endpoints",
        "operationId": "listEndpoints",
        "description": "Returns an array of Endpoint objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoints collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointsCollection"
                }
              }
            }
          }
        }
      }
    },
    "/endpoints/{id}": {
      "get": {
        "summary": "Show an existing Endpoint",
        "operationId": "showEndpoint",
        "description": "Returns a Endpoint object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/endpoints/{id}/authentications": {
      "get": {
        "summary": "List Authentications for Endpoint",
        "operationId": "listEndpointAuthentications",
        "description": "Returns an array of Authentication objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsCollection"
                }
              }
            }
          }
        }
      }
    },
    "/openapi.json": {
      "get": {
        "summary": "Return this API document in JSON format",
        "operationId": "getDocumentation",
        "responses": {
          "200": {
            "description": "The API document for this version of the API"
          }
        }
      }
    },
    "/source_types": {
      "get": {
        "summary": "List SourceTypes",
        "operationId": "listSourceTypes",
        "description": "Returns an array of SourceType objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "SourceTypes collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTypesCollection"
                }
              }
            }
          }
        }
      }
    },
    "/source_types/{source_type_id}": {
      "get": {
        "summary": "Show an existing SourceType",
        "operationId": "showSourceType",
        "description": "Returns a SourceType object",
        "parameters": [
          {
            "$ref": "#/components/parameters/SourceTypeID"
          }
        ],
        "responses": {
          "200": {
            "description": "SourceType info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceType"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/source_types/{source_type_id}/sources": {
      "get": {
        "summary": "List Sources for SourceType",
        "operationId": "listSourceTypeSources",
        "description": "Returns an array of Source objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/SourceTypeID"
          }
        ],
        "responses": {
          "200": {
            "description": "Sources collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesCollection"
                }
              }
            }
          }
        }
      }
    },
    "/sources": {
      "get": {
        "summary": "List Sources",
        "operationId": "listSources",
        "description": "Returns an array of Source objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Sources collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesCollection"
                }
              }
            }
          }
        }
      }
    },
    "/sources/{id}": {
      "get": {
        "summary": "Show an existing Source",
        "operationId": "showSource",
        "description": "Returns a Source object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Source info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/sources/{id}/endpoints": {
      "get": {
        "summary": "List Endpoints for Source",
        "operationId": "listSourceEndpoints",
        "description": "Returns an array of Endpoint objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoints collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointsCollection"
                }
              }
            }
          }
        }
      }
    },
    "/persons": {
      "get": {
        "summary": "List Person Objects",
        "operationId": "listPersons",
        "description": "Returns an array of person objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Person Object collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonsCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Person object",
        "operationId": "createPerson",
        "description": "Creates a Person object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          },
          "description": "Attributes to create a Person object",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Person Object creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{id}": {
      "get": {
        "summary": "Show an existing Person Object",
        "operationId": "showPerson",
        "description": "Returns a Person object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Person info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "summary": "Update an existing Person Object",
        "operationId": "updatePerson",
        "description": "Returns a updated Person object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          },
          "description": "Attributes to create a Person object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Person info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/graphql": {
      "post": {
        "summary": "Perform a GraphQL Query",
        "operationId": "postGraphQL",
        "description": "Performs a GraphQL Query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GraphQLRequest"
              }
            }
          },
          "description": "GraphQL Query Request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "GraphQL Query Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphQLResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://cloud.redhat.com/{basePath}",
      "description": "Production Server",
      "variables": {
        "basePath": {
          "default": "/api/sources/v1.0"
        }
      }
    },
    {
      "url": "http://localhost:{port}/{basePath}",
      "description": "Development Server",
      "variables": {
        "port": {
          "default": "3000"
        },
        "basePath": {
          "default": "/api/sources/v1.0"
        }
      }
    }
  ],
  "components": {
    "parameters": {
      "ID": {
        "name": "id",
        "in": "path",
        "description": "ID of the resource",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^\\d+$"
        }
      },
      "QueryFilter": {
        "in": "query",
        "name": "filter",
        "description": "Filter for querying collections.",
        "required": false,
        "style": "deepObject",
        "explode": true,
        "schema": {
          "type": "object"
        }
      },
      "QueryLimit": {
        "in": "query",
        "name": "limit",
        "description": "The numbers of items to return per page.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 100
        }
      },
      "QueryOffset": {
        "in": "query",
        "name": "offset",
        "description": "The number of items to skip before starting to collect the result set.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "SourceTypeID": {
        "name": "source_type_id",
        "in": "path",
        "description": "The Source Type ID",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^\\d+$"
        }
      }
    },
    "securitySchemes": {
      "UserSecurity": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "Authentication": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "authtype"
        ],
        "properties": {
          "authtype": {
            "example": "openshift_default",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "example": "OpenShift default",
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "resource_id": {
            "$ref": "#/components/schemas/ID"
          },
          "resource_type": {
            "example": "Endpoint",
            "type": "string"
          },
          "status": {
            "example": "valid",
            "type": "string"
          },
          "status_details": {
            "type": "string"
          },
          "tenant": {
            "type": "string"
          },
          "username": {
            "example": "user@example.com",
            "type": "string"
          },
          "hash": {
            "type": "object"
          },
          "array": {
            "type": "array",
            "items": {
              "type" : "integer"
            }
          }
        }
      },
      "AuthenticationsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authentication"
            }
          }
        }
      },
      "CollectionLinks": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        }
      },
      "CollectionMetadata": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          }
        }
      },
      "Endpoint": {
        "type": "object",
        "properties": {
          "certificate_authority": {
            "description": "Optional X.509 Certificate Authority",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "host": {
            "description": "URI host component",
            "example": "www.example.com",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "path": {
            "description": "URI path component",
            "example": "/api/v1",
            "type": "string"
          },
          "port": {
            "description": "URI port component",
            "example": 80,
            "type": "integer"
          },
          "role": {
            "example": "default",
            "type": "string"
          },
          "scheme": {
            "description": "URI scheme component",
            "example": "https",
            "type": "string"
          },
          "source_id": {
            "$ref": "#/components/schemas/ID"
          },
          "tenant": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "verify_ssl": {
            "description": "Should SSL be verified",
            "example": true,
            "type": "boolean"
          }
        }
      },
      "EndpointsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          }
        }
      },
      "GraphQLRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The GraphQL query",
            "default": "{}"
          },
          "operationName": {
            "type": "string",
            "description": "If the Query contains several named operations, the operationName controls which one should be executed",
            "default": ""
          },
          "variables": {
            "type": "object",
            "description": "Optional Query variables",
            "nullable": true
          }
        },
        "required": [
          "query"
        ]
      },
      "GraphQLResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Results from the GraphQL query"
          },
          "errors": {
            "type": "array",
            "description": "Errors resulting from the GraphQL query",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ID": {
        "type": "string",
        "description": "ID of the resource",
        "pattern": "/^\\d+$/",
        "readOnly": true
      },
      "OrderParameters": {
        "type": "object",
        "properties": {
          "service_parameters": {
            "type": "object",
            "description": "JSON object with provisioning parameters"
          },
          "provider_control_parameters": {
            "type": "object",
            "description": "The provider specific parameters needed to provision this service. This might include namespaces, special keys"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "example": "Sample Provider",
            "title": "Name",
            "type": "string"
          },
          "source_type_id": {
            "$ref": "#/components/schemas/ID"
          },
          "tenant": {
            "type": "string"
          },
          "uid": {
            "readOnly": true,
            "title": "Unique ID of the inventory source installation",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "example": "6.5.0",
            "readOnly": true,
            "title": "Version",
            "type": "string"
          }
        }
      },
      "SourceType": {
        "type": "object",
        "properties": {
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "example": "openshift",
            "type": "string"
          },
          "product_name": {
            "example": "OpenShift",
            "type": "string"
          },
          "schema": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "vendor": {
            "example": "Red Hat",
            "type": "string"
          }
        }
      },
      "SourceTypesCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceType"
            }
          }
        }
      },
      "SourcesCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          }
        }
      },
      "Person": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
	  "age",
	  "zip"
        ],
        "properties": {
          "name": {
            "example": "fred",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "address": {
            "type": "string"
          },
          "age": {
            "type": "integer"
          },
          "zip": {
            "type": "string"
          },
          "nested": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "props": {
                "type": "string"
              }
            }
          }
        }
      },
      "PersonsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          }
        }
      }
    }
  }
}
